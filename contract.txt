from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.asymmetric.utils import Prehashed
from cryptography.hazmat.primitives import serialization

from make_directory import make_node, check_node_availability


def add_node():
    try:
        private_key = ec.generate_private_key(ec.SECP256K1())
        print(private_key)
        private_key_bytes = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
        public_key = private_key.public_key()
        print(public_key)
        public_key_bytes = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        print("Private Key:")
        print(private_key_bytes.decode('utf-8'))
        print("\nPublic Key:")
        print(public_key_bytes.decode('utf-8'))
        public_pem = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        public_pem_str = public_pem.decode("utf-8")
        public_key_lines = public_pem_str.splitlines()
        public_key_base64 = ''.join(public_key_lines[1:-1])
        print(public_key_base64)
        private_key = serialization.load_pem_private_key(
            private_key_bytes,
            password=None
        )
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
        private_pem_str = private_pem.decode("utf-8")
        private_key_lines = private_pem_str.splitlines()
        private_key_base64 = ''.join(private_key_lines[1:-1])
        print(private_key_base64)
        response = {
            "state" : True,
            "private_key": private_key_base64,
            "public_key": public_key_base64
        }
        make_node(public_key_base64)
        return response
    except Exception as e:
        response = {
            'state': False,
            'error': str(e)
        }
        return response

def log_user(private_key):
    try:
        pem_private_key = f"""
-----BEGIN EC PRIVATE KEY-----
{private_key}
-----END EC PRIVATE KEY-----
        """
        print(pem_private_key)
        # Load the private key from the PEM string
        private_key = serialization.load_pem_private_key(
            pem_private_key.encode(),
            password=None,
        )

        # Derive the public key from the private key
        public_key = private_key.public_key()

        # Serialize the public key to PEM format
        public_pem = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )

        # Print the PEM-encoded public key
        print(public_pem.decode("utf-8"))
        public_pem_str = public_pem.decode("utf-8")
        public_key_lines = public_pem_str.splitlines()
        public_key_base64 = ''.join(public_key_lines[1:-1])
        print(public_key_base64)
        response = {
            'state': check_node_availability(public_key_base64),
            "public_key":public_key_base64,
            "donated_tokens":10,
            "minted_tokens":20
        }
        return response
    except Exception as e:
        response = {
            'state': False,
            'error': str(e)
        }
        return response

def transfer_tokens(data):
    try:
        print(data)
        transaction_data = data[2]
        public_key = data[1]
        signature = data[0]
        public_key_pem = f"""
        -----BEGIN EC PRIVATE KEY-----
        {public_key}
        -----END EC PRIVATE KEY-----
                    """
        public_key = serialization.load_pem_public_key(
            public_key_pem.encode('utf-8'),
            backend=default_backend()
        )
        digest = hashes.Hash(hashes.SHA256())
        digest.update(transaction_data)
        hash_value = digest.finalize()
        try:
            public_key.verify(
                signature,
                hash_value,
                ec.ECDSA(Prehashed(hashes.SHA256()))
            )
            response = {
                'state': True,
                "donated_tokens": 10,
                "minted_tokens": 20
            }
            return response
        except Exception as e:
            response = {
                'state': False,
                'error': str(e)
            }
            return response
    except Exception as e:
        response = {
            'state': False,
            'error': str(e)
        }
        return response
